{
  "name": "node-restify-validation",
  "version": "0.0.6",
  "author": {
    "name": "Timo Behrmann"
  },
  "license": "MIT",
  "keywords": [
    "rest",
    "api",
    "restify",
    "validation"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/z0mt3c/node-restify-validation.git"
  },
  "bugs": {
    "url": "https://github.com/z0mt3c/node-restify-validation/issues"
  },
  "scripts": {
    "test": "grunt test",
    "blanket": {
      "pattern": "//^(?!.*node_modules.*$).*lib//"
    }
  },
  "main": "lib/index",
  "readmeFilename": "README.md",
  "dependencies": {
    "underscore": "~1.5.2",
    "underscore.string": "~2.3.3",
    "validator": "~1.5.1"
  },
  "devDependencies": {
    "restify": ">=2.6.0",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.0",
    "grunt-contrib-watch": "~0.5.1",
    "grunt-mocha-cli": "~1.3.0",
    "matchdep": "~0.3.0",
    "should": "~2.0.2",
    "sinon": "~1.7.3",
    "grunt-mocha-cov": "~0.0.7",
    "grunt-release": "~0.6.0"
  },
  "readme": "# node-restify-validation\nValidation for REST Services built with [node-restify](https://github.com/mcavage/node-restify) in node.js\n\n[![Build Status](https://travis-ci.org/z0mt3c/node-restify-validation.png)](https://travis-ci.org/z0mt3c/node-restify-validation)\n[![Coverage Status](https://coveralls.io/repos/z0mt3c/node-restify-validation/badge.png?branch=master)](https://coveralls.io/r/z0mt3c/node-restify-validation?branch=master)\n[![Dependency Status](https://gemnasium.com/z0mt3c/node-restify-validation.png)](https://gemnasium.com/z0mt3c/node-restify-validation)\n\n## Requirements\n* node-restify-validation requires at least restify 2.6.0 since the validation model is defined in the route-object. (https://github.com/mcavage/node-restify/pull/408)\n* Currently it is required to map all parameters to the \"params-scope\" through the mapParams-option, since all validations will be performed agains the req.params object. (TODO: scope sensitive validation)\n\n\n## Simple request validation with node-restify\nGoal of this little project is to have the validation rules / schema as close to the route itself as possible on one hand without messing up the logic with further LOCs on the other hand.\n\nExample:\n\n    var server = restify.createServer();\n    server.use(restify.queryParser());\n    server.use(restifyValidation.validationPlugin( { errorsAsArray: false }));\n    \n    server.get({url: '/test/:name', validation: {\n        name: { isRequired: true, isIn: ['foo','bar'], scope: 'path' },\n        status: { isRequired: true, isIn: ['foo','bar'], scope: 'query' },\n        email: { isRequired: false, isEmail: true, scope: 'query' },\n        age: { isRequired: true, isInt: true, scope: 'query' }\n    }}, function (req, res, next) {\n        res.send(req.params);\n    });\n    \n    server.listen(8001, function () {\n        console.log('%s listening at %s', server.name, server.url);\n    });\n\n## Use\nSimply install it through npm\n\n    npm install node-restify-validation\n\n\n## Documentation powered by swagger\nOn top of the validation schema the [node-restify-swagger](https://github.com/z0mt3c/node-restify-swagger) library should later-on generate the swagger resources to provide a hands-on documentation. \n\n## Demo project\nA simple demo project can be cloned from [node-restify-demo](https://github.com/z0mt3c/node-restify-demo).\n\n## Supported validations\n\n    isRequired: true | function()\n    equalTo: {'fieldName'}\n\nPowered by [node-validator](https://github.com/chriso/node-validator).\n\n    contains\n    equals\n    is\n    isAfter\n    isAlpha\n    isAlphanumeric\n    isBefore\n    isCreditCard\n    isDate\n    isDecimal\n    isDivisibleBy\n    isEmail\n    isFloat\n    isHexColor\n    isHexadecimal\n    isIP\n    isIPNet\n    isIPv4\n    isIPv6\n    isIn\n    isInt\n    isLowercase\n    isNumeric\n    isUUID\n    isUUIDv3\n    isUUIDv4\n    isUppercase\n    isUrl\n    max\n    min\n    not\n    notContains\n    notIn\n    notRegex\n    regex\n\n\n## Conditional validations\nAll validation parameters are able to deal with functions as parameters.\n\nFor instance the parameterMatches-Condition:\n\n    module.exports.paramMatches = function (param, value) {\n        if (_.isArray(value)) {\n            return function() {\n                return _.contains(value, this.req.params[param]);\n            };\n        } else {\n            return function() {\n                return _.isEqual(value, this.req.params[param]);\n            };\n        }\n    };\n\nWhich will be used for instance as follows:\n\n    var validation = isRequired: require('node-restify-vaidation');\n    ...\n    parameter: { isRequired: validation.when.paramMatches('param1', ['a', 'b']) }\n\nAs result the parameter will only be required when param1 matches a or b. The called method will have a context (this) containing the following information:\n\n* req: the request object\n* validationModel: the complete validation model\n* validationRules: the validationRules for the current atribute\n* options: the options which have initially been passed\n* params: flattend request parameters\n* recentErrors: errors which have been computed until now\n\n\n## Inspiration\nnode-restify-validation was & is inspired by [backbone.validation](https://github.com/thedersen/backbone.validation).\nIn terms of validation node-restify-validation makes use of [node-validator](https://github.com/chriso/node-validator).\n\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2013 Timo Behrmann\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n\n\n\n\n",
  "_id": "node-restify-validation@0.0.6",
  "description": "Validation for REST Services built with [node-restify](https://github.com/mcavage/node-restify) in node.js",
  "dist": {
    "shasum": "91de5516b0ffc70e501cdeab290408d62cc8b3b3"
  },
  "_from": "node-restify-validation@0.0.6",
  "_resolved": "https://registry.npmjs.org/node-restify-validation/-/node-restify-validation-0.0.6.tgz"
}
